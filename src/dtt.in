#! @PYTHON@

#
# Copyright (C) 2008 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

import os
import sys
import traceback
import getopt
import pprint

sys.path.append("@pkgvpythondir@")

from   Trace import *
from   DB    import *
from   Debug import *
from   Entry import *

def hint(s) :
    print(s)
    print("Use `" + PROGRAM_NAME + " -h' for help")

def usage() :
    print(PROGRAM_NAME + " OPTIONS")
    print("")
    print("  -a | --add [ARGS]         Add node")
    print("  -d | --database [ARG]     Change the database from the default to")
    print("                            the filename specified")
    print("  -r | --remove [ARGS]      Remove node (and its children)")
    print("  -e | --edit [ARGS]        Edit node")
    print("  -R | --reparent [ARGS]    Reparent node (and its children)")
    print("  -s | --show               Display all notes")
    print("  -v | --verbose            Enable debug mode")
    print("  -h | --help               This help")
    print("")
    print("Report bugs to <@PACKAGE_BUGREPORT@>")

def version() :
    print(PROGRAM_NAME + " (" + PACKAGE_NAME + ") " + PACKAGE_VERSION)

DEFAULT_SOURCE_FILE = ".todo"

def do_add(database, args) :
    return 1

def do_remove(database, args) :
    filter = None
    # Parse filter here
    if (filter == None) :
        raise Exception("filter is empty")

    id = None
    # Find node (from id) here
    node = None
    if (node == None) :
        raise Exception("node " + id +" not found")

    return 1

def do_edit(database, args) :
    id = None

    # Find node (from id) here
    node = None
    if (node == None) :
        raise Exception("node " + id +" not found")

    # Edit node now

    return 1

def do_reparent(database, args) :

    id = None

    # Find source node
    source = None
    if (node == None) :
        raise Exception("cannot find source node " + id " ...")

    id = None

    # Find destination node
    destination = None
    if (destination == None) :
        raise Exception("cannot find destination node " + id " ...")

    return 1

class ShowVisitor :
    def __init__(self, mono, verbose) :
        self.__mono   = mono
        self.__indent = ""
        self.__index  = 0

    def visit(self, e) :
        assert(e != None)

        #debug("Visiting entry " + str(e))
        
        if (not self.__mono) :
            color_index = green
            p           = e.priority_get()
            if (p == Entry.PRIORITY_VERYHIGH) :
                color_text = red
            elif (p == Entry.PRIORITY_HIGH) :
                color_text = yellow
            elif (p == Entry.PRIORITY_MEDIUM) :
                color_text = white
            elif (p == Entry.PRIORITY_LOW) :
                color_text = cyan
            elif (p == Entry.PRIORITY_VERYLOW) :
                color_text = blue
            else :
                color_text = white
        else :
            color_index = lambda x: x # pass-through
            color_text  = lambda x: x # pass-through

        assert(color_index != None)
        assert(color_text != None)

        print(self.__indent                 +
              color_index(str(self.__index) + ".") +
              color_text(e.text))

        old_indent = self.__indent
        old_index  = self.__index

        self.__indent = self.__indent + "    "
        self.__index  = 0
        for j in e.children() :
            self.__index = self.__index + 1
            j.accept(self) # Re-accept myself

        self.__indent = old_indent
        self.__index  = old_index

def do_purge(database, args) :
    id = None

    # Find node (from id) here
    node = None
    if (node == None) :
        raise Exception("node " + id +" not found")

    # Remove node

    return 0

def do_show(database, args) :
    # Load DB
    db   = DB()
    tree = db.load(database)

    v = ShowVisitor(False, False)
    tree.accept(v)

    return 0

def main(args) :
    # Parse command line
    try :
	opts, args = getopt.getopt(args[1:],
				   "a:d:r:e:R:psvh",
				   [ "add=",
				     "database=",
                                     "remove=",
				     "edit=",
				     "reparent=",
                                     "purge",
				     "show",
				     "help",
				     "version" ])
    except getopt.GetoptError :
	hint("Parameter(s) error")
	return 1

    source    = DEFAULT_SOURCE_FILE
    do_action = None
    parms     = []
    for opt, arg in opts :
	if opt in ("-a", "--add") :
	    do_action = do_add ;      parms  = args[2:]
	elif opt in ("-d", "--database") :
	    source = arg
	elif opt in ("-r", "--remove") :
	    do_action = do_remove ;   parms  = args[2:]
	elif opt in ("-e", "--edit") :
	    do_action = do_edit ;     parms  = args[2:]
	elif opt in ("-r", "--reparent") :
	    do_action = do_reparent ; parms  = args[2:]
	elif opt in ("-p", "--purge") :
	    do_action = do_purge ;    parms  = args[2:]
	elif opt in ("-s", "--show") :
	    do_action = do_show ;     parms  = args[2:]
	elif opt in ("-h", "--help") :
	    usage()
	    return 0
	elif opt in ("-v", "--version") :
	    version()
	    return 0
	else :
	    bug()

    if (do_action == None) :
        hint("Missing parameter(s)")
        return 1
        
    try :
        retval = do_action(source, parms)
    except IOError, e :
        error(e.value)
    except ValueError, e :
        error(e.value)
    except :
        bug()
        return 1

    return retval

if (__name__ == '__main__') :
    sys.exit(main(sys.argv))
