#! @PYTHON@

#
# Copyright (C) 2008 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

try :
    import os
    import sys
    import traceback
    import getopt
    import ConfigParser
except ImportError :
    # XXX FIXME: Add better error reporting ....
    print("Cannot import system modules ...")
    sys.exit(-1)

sys.path.append("@pkgvpythondir@")

try :
    from   Trace import *
    from   Debug import *
    from   Entry import *
    import DB
except ImportError :
    # XXX FIXME: Add better error reporting ....
    print("Cannot import package's own modules ...")
    sys.exit(-1)

try :
    import cmdAdd
    import cmdEdit
    import cmdMove
    import cmdRemove
    import cmdShow
except ImportError :
    # XXX FIXME: Add better error reporting ....
    print("Cannot import package's commands ...")
    sys.exit(-1)

def hint(s) :
    print(s)
    print("Use `" + PROGRAM_NAME + " -h' for help")

def version() :
    print(PROGRAM_NAME + " (" + PACKAGE_NAME + ") " + PACKAGE_VERSION)

def help() :
    print("Usage: " + PROGRAM_NAME + " [OPTION]... [COMMAND]")
    print("")
    print("Options:")
    print("  -h, --help[=COMMAND]    print some help, then exit")
    print("  -V, --version           print version number, then exit")
    print("  -v, --verbose           display verbosely when showing, report verbosely")
    print("                          during other commands")
    print("  -d, --debug             enable debug mode")
    print("       --colors           use colors")
    print("       --no-colors        do not use colors")
    print("       --no-configs       do not load configuration files")
    print("       --database=FILE    change the database from the default "
          "(" + DEFAULT_DB_FILE + ")")
    print("                          to the filename specified")
    print("")
    print("Commands:")
    print("  add                     add a new node")
    print("  edit                    edit a node")
    print("  move                    reparent nodes")
    print("  remove                  remove a node (and its children)")
    print("  show                    display nodes")
    print("")
    print("See `" + PROGRAM_NAME + " --help COMMAND' for more information about a specific command.")
    print("The programs looks for configuration files in the following order:")
    print("")
    for i in CFG_SEARCH_PATHS :
        # Do not use os.path.expandvars() here, we must preserve the vars name
        print("  " + i)
    print("")
    print("Report bugs to <" + PACKAGE_BUGREPORT + ">")
    return 0

commands = {
    'add'    : { 'do' : cmdAdd.do    , 'help' : cmdAdd.help    },
    'edit'   : { 'do' : cmdEdit.do   , 'help' : cmdEdit.help   },
    'move'   : { 'do' : cmdMove.do   , 'help' : cmdMove.help   },
    'remove' : { 'do' : cmdRemove.do , 'help' : cmdRemove.help },
    'show'   : { 'do' : cmdShow.do   , 'help' : cmdShow.help   },
}

def main(args) :
    # Setup some sane configuration default values
    configuration = {
	'colors'   : True,
	'database' : DEFAULT_DB_FILE,
	'configs'  : True,
	'verbose'  : False,
	'debug'    : False
	}

    # Parse command line
    try :
	opts, args = getopt.getopt(args[1:],
				   "dvVh",
				   [ "colors",
				     "no-colors",
				     "no-configs",
				     "database=",
				     "verbose",
				     "debug",
				     "version",
				     "help",
				     ])
    except getopt.GetoptError :
	hint("Unknown argument")
	return 1

    do_command = None
    for opt, arg in opts :
	if opt in ("--colors") :
	    configuration['colors']   = True
	elif opt in ("--no-colors") :
	    configuration['colors']   = False
	elif opt in ("--database") :
	    configuration['database'] = arg
	elif opt in ("--no-configs") :
	    configuration['configs']  = False
	elif opt in ("--verbose") :
	    configuration['verbose']  = True
	elif opt in ("--debug") :
	    configuration['debug']    = True
	elif opt in ("-V", "--version") :
	    version()
            return 0
	elif opt in ("-h", "--help") :
            command_help = help
            if (len(args) >= 1) :
                try :
                    command      = args[0]
                    command_help = commands[command]['help']
                except KeyError :
                    hint("Unknown command `" + command + "'")
                    return 1
                except :
                    bug()
            return command_help()
	else :
	    bug()

    if (configuration['configs'] == True) :
	# Read local-directory and home-directory configuration files if
	# present, assuming the local-directory config precedence over the home
	# directory one

	config = ConfigParser.ConfigParser()
	try :
	    config.read(os.path.expandvars(CFG_SEARCH_PATHS))

	    configuration['colors'] = config.getboolean('','colors')
	except ConfigParser.ParsingError :
	    error("Problems parsing configuration file")
	    return 1
	except:
	    if (configuration['verbose'] == True) :
                warning("Problem reading configuration file, "
                        "using default values ...")
    if (len(args) < 1) :
        hint("Missing command")
        return 1

    command = args[0]
    try :
        command_do = commands[command]['do']
    except KeyError :
	hint("Unknown command `" + command + "'")
	return 1
    except :
        bug()

    parameters = []
    if (len(args) >= 3) :
        parameters = args[3:]

    retval = 1
    try :
	retval = command_do(configuration, parameters)
    except IOError, e :
	error(e)
    except ValueError, e :
	error(e)
    except DB.Error, e :
        error(e)
    except :
	bug()

    return retval

if (__name__ == '__main__') :
    sys.exit(main(sys.argv))
