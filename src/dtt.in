#! @PYTHON@

#
# Copyright (C) 2008 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

try :
    import os
    import sys
    import traceback
    import getopt
    import ConfigParser
except ImportError :
    # XXX FIXME: Add better error reporting ....
    print("Cannot import system modules ...")
    sys.exit(-1)

sys.path.append("@pkgvpythondir@")

try :
    from   Trace import *
    from   Debug import *
    from   Entry import *
except ImportError :
    # XXX FIXME: Add better error reporting ....
    print("Cannot import package's own modules ...")
    sys.exit(-1)

try :
    import cmd_add
    import cmd_edit
    import cmd_move
    import cmd_remove
    import cmd_show
except ImportError :
    # XXX FIXME: Add better error reporting ....
    print("Cannot import package's commands ...")
    sys.exit(-1)

DEFAULT_DB_FILE = ".todo"

def version() :
    print(PROGRAM_NAME + " (" + PACKAGE_NAME + ") " + PACKAGE_VERSION)

# Search paths we look into for the configuration files
search_paths = [ '@sysconfdir@/' + PROGRAM_NAME,
                 '$HOME/.'       + PROGRAM_NAME,
                 '.'             + PROGRAM_NAME ]

def hint(s) :
    print(s)
    print("Use `" + PROGRAM_NAME + " -h' for help")

def help() :
    print("Usage: " + PROGRAM_NAME + " [FLAG]... [COMMAND]")
    print("")
    print("Flags:")
    print("       --colors            use colors")
    print("       --no-colors         do not use colors")
    print("       --no-configs        do not use config files")
    print("       --database=FILE     change the database from the default "
          "(" + DEFAULT_DB_FILE + ")")
    print("                           to the filename specified")
    print("       --verbose           display verbosely when showing, report verbosely")
    print("                           during other commands")
    print("       --debug             enable debug mode")
    print("")
    print("Commands:")
    print("  -a | --add               add a new node")
    print("  -r | --remove            remove a node (and its children)")
    print("  -e | --edit              edit a node")
    print("  -m | --move              reparent nodes")
    print("  -s | --show              display nodes")
    print("  -V | --version           print version number, then exit")
    print("  -h | --help[=COMMAND]    print some help, then exit")
    print("")
    print("See `" + PROGRAM_NAME + " --help COMMAND' for more information about a specific command.")
    print("The programs looks for configuration files in the following order:")
    print("")
    for i in search_paths :
        # Do not use os.path.expandvars() here, we must preserve the vars name
        print("  " + i)
    print("")
    print("Report bugs to <@PACKAGE_BUGREPORT@>")

def main(args) :
    # Setup some sane configuration default values
    configuration = {
	'colors'   : True,
	'database' : DEFAULT_DB_FILE,
	'configs'  : True,
	'verbose'  : False,
	'debug'    : False
	}

    # Parse command line
    try :
	opts, args = getopt.getopt(args[1:],
				   "aremsVh",
				   [ "colors",
				     "no-colors",
				     "no-configs",
				     "database=",
				     "verbose",
				     "debug",

				     "add",
				     "remove",
				     "move",
				     "edit",
				     "show",

				     "version",
				     "help",
				     ])
    except getopt.GetoptError :
	hint("Parameter(s) error")
	return 1

    do_command = None
    parms      = []
    for opt, arg in opts :
	if opt in ("--colors") :
	    configuration['colors']   = True
	elif opt in ("--no-colors") :
	    configuration['colors']   = False
	elif opt in ("--database") :
	    configuration['database'] = arg
	elif opt in ("--no-configs") :
	    configuration['configs']  = False
	elif opt in ("--verbose") :
	    configuration['verbose']  = True
	elif opt in ("--debug") :
	    configuration['debug']    = True

	elif opt in ("-a", "--add") :
	    do_command = cmd_add.do ;    parms  = args[2:] ; break
	elif opt in ("-r", "--remove") :
	    do_command = cmd_remove.do ; parms  = args[2:] ; break
	elif opt in ("-m", "--move") :
	    do_command = cmd_move.do ;   parms  = args[2:] ; break
	elif opt in ("-e", "--edit") :
	    do_command = cmd_edit.do ;   parms  = args[2:] ; break
	elif opt in ("-s", "--show") :
	    do_command = cmd_show.do ;   parms  = args[2:] ; break

	elif opt in ("-V", "--version") :
	    version()
	    return 0
	elif opt in ("-h", "--help") :
	    help()
	    return 0
	else :
	    bug()

    if (configuration['configs'] == True) :
	# Read local-directory and home-directory configuration files if
	# present, assuming the local-directory config precedence over the home
	# directory one

	config = ConfigParser.ConfigParser()
	try :
	    config.read(os.path.expandvars(search_paths))

	    configuration['colors'] = config.getboolean('','colors')
	except ConfigParser.ParsingError :
	    error("Problems parsing configuration file")
	    return 1
	except:
	    if (configuration['verbose'] == True) :
                warning("Problem reading configuration file, "
                        "using default values ...")

    if (do_command == None) :
	hint("Missing parameter(s)")
	return 1

    retval = 1
    try :
	retval = do_command(configuration, parms)
    except IOError, e :
	error(e)
    except ValueError, e :
	error(e)
    except DB.Error, e :
        error(e)
    except :
	bug()

    return retval

if (__name__ == '__main__') :
    sys.exit(main(sys.argv))
