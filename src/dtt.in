#! @PYTHON@

#
# Copyright (C) 2008 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

try :
    import os
    import sys
    import traceback
    import getopt
    import ConfigParser
except ImportError :
    # XXX FIXME: Add better error reporting ....
    print("Cannot import system modules ...")
    sys.exit(-1)

sys.path.append("@pkgvpythondir@")

try :
    from   Trace      import *
    from   Debug      import *
    from   Entry      import *
    from   Command    import *
    import Exceptions
except ImportError :
    # XXX FIXME: Add better error reporting ....
    print("Cannot import package's own modules ...")
    sys.exit(-1)

try :
    import cmdInit
    import cmdImport
    import cmdAdd
    import cmdEdit
    import cmdMove
    import cmdRemove
    import cmdShow
    import cmdTouch
except ImportError :
    # XXX FIXME: Add better error reporting ....
    print("Cannot import package's commands ...")
    sys.exit(-1)

def hint(s) :
    print(s)
    print("Use `" + PROGRAM_NAME + " -h' for help")

def version() :
    print(PROGRAM_NAME + " (" + PACKAGE_NAME + ") " + PACKAGE_VERSION)

commands = {
    'init'   : { 'description' : cmdInit.description,
                 'do'          : cmdInit.do
                 },
    'import' : { 'description' : cmdImport.description,
                 'do'          : cmdImport.do
                 },
    'add'    : { 'description' : cmdAdd.description,
                 'do'          : cmdAdd.do
                 },
    'edit'   : { 'description' : cmdEdit.description,
                 'do'          : cmdEdit.do
                 },
    'move'   : { 'description' : cmdMove.description,
                 'do'          : cmdMove.do
                 },
    'remove' : { 'description' : cmdRemove.description,
                 'do'          : cmdRemove.do
                 },
    'show'   : { 'description' : cmdShow.description,
                 'do'          : cmdShow.do
                 },
    'touch'  : { 'description' : cmdTouch.description,
                 'do'          : cmdTouch.do
                 },
    }

#def help() :
#    print("Usage: " + PROGRAM_NAME + " [OPTION]... [COMMAND]")
#    print("")
#    print("Options:")
#    print("  -h, --help              print this help, then exit")
#    print("      --version           print version number, then exit")
#    print("  -v, --verbose           display verbosely when showing, report verbosely")
#    print("                          during other commands")
#    print("  -d, --debug             enable debug mode")
#    print("  -n, --dry-run           display operations without performing modifications")
#    print("      --colors            use colors")
#    print("      --no-colors         do not use colors")
#    print("      --no-configs        do not load configuration files")
#    print("      --database=FILE     change the database from the default "
#          "(" + DEFAULT_DB_FILE + ")")
#    print("                          to the filename specified")
#    print("")
#    print("Commands:")
#    for i in commands.keys() :
#        print("  %-23s %s" %(i, commands[i]['description']()))
#    print("")
#    print("See `" + PROGRAM_NAME + " COMMAND --help' for more information about a specific command.")
#    print("The programs looks for configuration files in the following order:")
#    print("")
#    for i in CFG_SEARCH_PATHS :
#        # Do not use os.path.expandvars() here, we must preserve the vars name
#        print("  " + i)
#    print("")
#    print("Report bugs to <" + PACKAGE_BUGREPORT + ">")

def main(arguments) :
    # Setup some sane configuration default values
    configuration = {
	'colors'   : True,
	'database' : DEFAULT_DB_FILE,
	'configs'  : True,
	'verbose'  : False,
	'debug'    : False
	}
    
    footer = "Commands:\n"
    for i in commands.keys() :
        footer = \
            footer + \
            ("  %-16s %s" %(i, commands[i]['description']())) + \
            "\n"
    footer = footer + "\n"
    footer = footer + \
        "See `" + PROGRAM_NAME + " COMMAND --help' " + \
        "for more information about a specific command.\n" + \
        "The program looks for configuration files in the following order:\n\n" 
    for i in CFG_SEARCH_PATHS :
        # Do not use os.path.expandvars() here, we must preserve the vars name
        footer = footer + "  " + i + "\n"

    # Parse command line
    command = Command("", footer)
    command.add_option("-v", "--verbose",
                       action = "store_false",
                       dest   = "verbose",
                       help   = "display verbosely")
    command.add_option("-d", "--debug",
                       action = "store_false",
                       dest   = "debug",
                       help   = "enable debug mode")
    command.add_option("-n", "--dry-run",
                       action = "store_false",
                       dest   = "dry_run",
                       help   = "display operations without performing "
                       "modifications")
    command.add_option("--colors",
                       action = "store_false",
                       dest   = "colors",
                       help   = "use colors")
    command.add_option("--no-colors",
                       action = "store_true",
                       dest   = "colors",
                       help   = "do not use colors")
    command.add_option("--no-configs",
                       action = "store_false",
                       dest   = "configs",
                       help   = "do not load configuration files")
    command.add_option("--database",
                       action = "store",
                       type   = "string",
                       dest   = "database",
                       metavar="FILE",
                       help   = "change the database from the default "
                       "(" + DEFAULT_DB_FILE + ") "
                       "to the filename specified")

    (opts, args) = command.parse_args(arguments[1:])

#    try :
#	opts, args = getopt.getopt(args[1:],
#				   "ndvh",
#				   [ "colors",
#				     "no-colors",
#				     "no-configs",
#				     "database=",
#				     "dry-run",
#                                     "verbose",
#				     "debug",
#				     "version",
#				     "help",
#				     ])
#    except getopt.GetoptError :
#	hint("Unknown argument")
#	return 1
#
#    dry_run    = False
#    do_command = None
#    for opt, arg in opts :
#	if opt in ("--colors") :
#	    configuration['colors']   = True
#	elif opt in ("--no-colors") :
#	    configuration['colors']   = False
#	elif opt in ("--database") :
#	    configuration['database'] = arg
#	elif opt in ("--no-configs") :
#	    configuration['configs']  = False
#	elif opt in ("-v", "--verbose") :
#	    configuration['verbose']  = True
#	elif opt in ("-n", "--dry-run") :
#	    dry_run                   = True
#	elif opt in ("-d", "--debug") :
#	    configuration['debug']    = True
#	elif opt in ("--version") :
#	    version()
#            return 0
#	elif opt in ("-h", "--help") :
#            help()
#            return 0
#	else :
#	    bug()

    if (configuration['configs'] == True) :
	# Read local-directory and home-directory configuration files if
	# present, assuming the local-directory config precedence over the home
	# directory one

	config = ConfigParser.ConfigParser()
	try :
	    config.read(os.path.expandvars(CFG_SEARCH_PATHS))

	    configuration['colors'] = config.getboolean('','colors')
	except ConfigParser.ParsingError :
	    error("Problems parsing configuration file")
	    return 1
	except:
	    if (configuration['verbose'] == True) :
                warning("Problem reading configuration file, "
                        "using default values ...")

    if (len(command.rargs) < 1) :
        hint("Missing command")
        return 1

    cmd = command.rargs[0]
    try :
        command_do = commands[cmd]['do']
    except KeyError :
	hint("Unknown command `" + command + "'")
	return 1
    except :
        bug()

    parameters = []
    if (len(command.rargs) >= 2) :
        parameters = command.rargs[1:]

    retval = 1
    try :
	retval = command_do(configuration, parameters)
    except IOError, e :
	error(e)
    except ValueError, e :
	error(e)
    except Exceptions.Parameters, e :
        hint(e)
    except Exceptions, e :
        error(e)
    except SystemExit, e:
        retval = e
    except :
	bug()

    return retval

if (__name__ == '__main__') :
    sys.exit(main(sys.argv))
