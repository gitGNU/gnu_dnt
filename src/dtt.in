#! @PYTHON@

#
# Copyright (C) 2008 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

try :
    import os
    import sys
    import traceback
    import getopt
    import ConfigParser
except ImportError :
    # XXX FIXME: Add better error reporting ....
    print("Cannot import system modules ...")
    sys.exit(-1)

sys.path.append("@pkgvpythondir@")

try :
    from   Trace import *
    import DB
    from   Debug import *
    from   Entry import *
except ImportError :
    # XXX FIXME: Add better error reporting ....
    print("Cannot import package's own modules ...")
    sys.exit(-1)

DEFAULT_DB_FILE = ".todo"

def hint(s) :
    print(s)
    print("Use `" + PROGRAM_NAME + " -h' for help")

def usage() :
    print("Usage: " + PROGRAM_NAME + " [FLAG]... [COMMAND]")
    print("")
    print("Flags:")
    print("       --colors            use colors")
    print("       --no-colors         do not use colors")
    print("       --no-configs        do not use config files")
    print("       --database=FILE     change the database from the default "
          "(" + DEFAULT_DB_FILE + ")")
    print("                           to the filename specified")
    print("       --verbose           display verbosely when showing, report verbosely")
    print("                           during other commands")
    print("       --debug             enable debug mode")
    print("")
    print("Commands:")
    print("  -a | --add               add a new node")
    print("  -r | --remove            remove a node (and its children)")
    print("  -e | --edit              edit a node")
    print("  -m | --move              reparent nodes")
    print("  -s | --show              display nodes")
    print("  -V | --version           print version number, then exit")
    print("  -h | --help[=COMMAND]    print some help, then exit")
    print("")
    print("See `" + PROGRAM_NAME + " --help COMMAND' for more information about a specific command.")
    print("")
    print("Report bugs to <@PACKAGE_BUGREPORT@>")

def version() :
    print(PROGRAM_NAME + " (" + PACKAGE_NAME + ") " + PACKAGE_VERSION)

def do_add(configuration, args) :
    return 1

def do_remove(configuration, args) :
    filter = None
    # Parse filter here
    if (filter == None) :
	raise Exception("filter is empty")

    id = None
    # Find node (from id) here
    node = None
    if (node == None) :
	raise Exception("node " + id +" not found")

    return 1

def do_edit(configuration, args) :
    id = None

    # Find node (from id) here
    node = None
    if (node == None) :
	raise Exception("node " + id +" not found")

    # Edit node now

    return 1

def do_move(configuration, args) :

    id = None

    # Find source node
    source = None
    if (node == None) :
	raise Exception("cannot find source node " + id + " ...")

    id = None

    # Find destination node
    destination = None
    if (destination == None) :
	raise Exception("cannot find destination node " + id + " ...")

    return 1

class ShowVisitor :
    def __init__(self, colors, be_verbose) :
	self.__colors  = colors
        self.__verbose = be_verbose
	self.__indent  = ""
	self.__index   = 0

    def visit(self, e) :
	assert(e != None)

	#debug("Visiting entry " + str(e))

	if (self.__colors) :
	    color_index = green
	    p           = e.priority_get()
	    if (p == Entry.PRIORITY_VERYHIGH) :
		color_text = red
	    elif (p == Entry.PRIORITY_HIGH) :
		color_text = yellow
	    elif (p == Entry.PRIORITY_MEDIUM) :
		color_text = white
	    elif (p == Entry.PRIORITY_LOW) :
		color_text = cyan
	    elif (p == Entry.PRIORITY_VERYLOW) :
		color_text = blue
	    else :
		color_text = white
	else :
	    color_index = lambda x: x # pass-through
	    color_text  = lambda x: x # pass-through

	assert(color_index != None)
	assert(color_text != None)

	print(self.__indent                 +
	      color_index(str(self.__index) + ".") +
	      color_text(e.text))

	old_indent = self.__indent
	old_index  = self.__index

	self.__indent = self.__indent + "    "
	self.__index  = 0
	for j in e.children() :
	    self.__index = self.__index + 1
	    j.accept(self) # Re-accept myself

	self.__indent = old_indent
	self.__index  = old_index

def do_purge(configuration, args) :
    id = None

    # Find node (from id) here
    node = None
    if (node == None) :
	raise Exception("node " + id +" not found")

    # Remove node

    return 0

def do_show(configuration, args) :
    # Load DB
    db   = DB.Database()
    tree = db.load(configuration['database'])

    v = ShowVisitor(configuration['colors'], configuration['verbose'])
    tree.accept(v)

    return 0

def main(args) :
    # Setup some sane configuration default values
    configuration = {
	'colors'   : True,
	'database' : DEFAULT_DB_FILE,
	'configs'  : True,
	'verbose'  : False,
	'debug'    : False
	}

    # Parse command line
    try :
	opts, args = getopt.getopt(args[1:],
				   "aremsVh",
				   [ "colors",
				     "no-colors",
				     "no-configs",
				     "database=",
				     "verbose",
				     "debug",

				     "add",
				     "remove",
				     "move",
				     "edit",
				     "show",
				     "version",
				     "help",
				     ])
    except getopt.GetoptError :
	hint("Parameter(s) error")
	return 1

    do_command = None
    parms      = []
    for opt, arg in opts :
	if opt in ("--colors") :
	    configuration['colors']   = True
	elif opt in ("--no-colors") :
	    configuration['colors']   = False
	elif opt in ("--database") :
	    configuration['database'] = arg
	elif opt in ("--no-configs") :
	    configuration['configs']  = False
	elif opt in ("--verbose") :
	    configuration['verbose']  = True
	elif opt in ("--debug") :
	    configuration['debug']    = True

	elif opt in ("-a", "--add") :
	    do_command = do_add ;      parms  = args[2:] ; break
	elif opt in ("-r", "--remove") :
	    do_command = do_remove ;   parms  = args[2:] ; break
	elif opt in ("-e", "--edit") :
	    do_command = do_edit ;     parms  = args[2:] ; break
	elif opt in ("-m", "--move") :
	    do_command = do_reparent ; parms  = args[2:] ; break
	elif opt in ("-s", "--show") :
	    do_command = do_show ;     parms  = args[2:] ; break

	elif opt in ("-V", "--version") :
	    version()
	    return 0
	elif opt in ("-h", "--help") :
	    usage()
	    return 0
	else :
	    bug()

    if (configuration['configs'] == True) :
	# Read local-directory and home-directory configuration files if
	# present, assuming the local-directory config precedence over the home
	# directory one

	config = ConfigParser.ConfigParser()
	try :
	    config.read([ os.path.expanduser('~/.' + PROGRAM_NAME),
			  './.' + PROGRAM_NAME ])

	    configuration['colors'] = config.getboolean('','colors')
	except ConfigParser.ParsingError :
	    error("Problems parsing configuration file")
	    return 1
	except:
	    if (configuration['verbose'] == True) :
                warning("Problem reading configuration file, "
                        "using default values ...")

    if (do_command == None) :
	hint("Missing parameter(s)")
	return 1

    retval = 1
    try :
	retval = do_command(configuration, parms)
    except IOError, e :
	error(e)
    except ValueError, e :
	error(e)
    except DB.Error, e :
        error(e)
    except :
	bug()

    return retval

if (__name__ == '__main__') :
    sys.exit(main(sys.argv))
