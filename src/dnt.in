#! @PYTHON@ -t

#
# Copyright (C) 2008 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

try :
    import os
    import sys
    import traceback
    import getopt
except ImportError :
    # XXX FIXME: Add better error reporting ....
    print("Cannot import system modules ...")
    sys.exit(-1)

sys.path.append("@pkgvpythondir@")

try :
    from   Trace         import *
    from   Debug         import *
    from   Entry         import *
    from   Command       import *
    from   Configuration import *
    import Exceptions
except ImportError :
    # XXX FIXME: Add better error reporting ....
    print("Cannot import package's own modules ...")
    sys.exit(-1)

try :
    import Commands.Init
    import Commands.Add
    import Commands.Config
    import Commands.Edit
    import Commands.Move
    import Commands.Remove
    import Commands.Show
    import Commands.Touch
except ImportError :
    # XXX FIXME: Add better error reporting ....
    print("Cannot import package's commands ...")
    sys.exit(-1)

def hint(s) :
    print(s)
    print("Use `" + PROGRAM_NAME + " -h' for help")

def version() :
    print(PROGRAM_NAME + " (" + PACKAGE_NAME + ") " + PACKAGE_VERSION)

commands = {
    'init'   : { 'description' : Commands.Init.description,
                 'do'          : Commands.Init.do             },
    'add'    : { 'description' : Commands.Add.description,
                 'do'          : Commands.Add.do              },
    'config' : { 'description' : Commands.Config.description,
                 'do'          : Commands.Config.do           },
    'edit'   : { 'description' : Commands.Edit.description,
                 'do'          : Commands.Edit.do             },
    'move'   : { 'description' : Commands.Move.description,
                 'do'          : Commands.Move.do             },
    'remove' : { 'description' : Commands.Remove.description,
                 'do'          : Commands.Remove.do           },
    'show'   : { 'description' : Commands.Show.description,
                 'do'          : Commands.Show.do             },
    'touch'  : { 'description' : Commands.Touch.description,
                 'do'          : Commands.Touch.do            },
    }

def main(arguments) :
    # Setup the configuration with some default values
    configuration = Configuration()
    configuration.add_section(PROGRAM_NAME)
    configuration.set(PROGRAM_NAME, 'colors',        True)
    configuration.set(PROGRAM_NAME, 'verbose',       False)
    configuration.set(PROGRAM_NAME, 'debug',         False)
    configuration.set(PROGRAM_NAME, 'database',      DEFAULT_DB_FILE)
    configuration.set(PROGRAM_NAME, 'configuration', DEFAULT_CFG_FILE)

    # Build the command line parser
    footer = "Commands:\n"
    for i in commands.keys() :
        footer = \
            footer + \
            ("  %-16s %s" %(i, commands[i]['description']())) + \
            "\n"
    footer = footer + "\n"
    footer = footer + \
        "See `" + PROGRAM_NAME + " COMMAND --help' " + \
        "for more information about a specific command.\n" + \
        "The program looks for configuration files in the following order:\n\n" 
    for i in CFG_SEARCH_PATHS :
        # Do not use os.path.expandvars() here, we must preserve the vars name
        footer = footer + "  " + i + "\n"

    command = Command("", "[OPTION]... [COMMAND] [COMMAND-OPTION]...", footer)
    command.add_option("-v", "--verbose",
                       action = "store_true",
                       dest   = "verbose",
                       help   = "display verbosely")
    command.add_option("-d", "--debug",
                       action = "store_true",
                       dest   = "debug",
                       help   = "enable debug mode")
    command.add_option("-n", "--dry-run",
                       action = "store_true",
                       dest   = "dry_run",
                       help   = "display operations without performing "
                       "modifications")
    command.add_option("--colors",
                       action = "store_true",
                       dest   = "colors",
                       help   = "use colors")
    command.add_option("--no-colors",
                       action = "store_false",
                       dest   = "colors",
                       help   = "do not use colors")
    command.add_option("--database",
                       action = "store",
                       type   = "string",
                       dest   = "database",
                       metavar="FILE",
                       help   = "change database file from the "
                       "default (" + DEFAULT_DB_FILE + ") "
                       "to the filename specified")
    command.add_option("--configuration",
                       action = "store",
                       type   = "string",
                       dest   = "configuration",
                       metavar="FILE",
                       help   = "change configuration file from the "
                       "default (" + DEFAULT_CFG_FILE + ") "
                       "to the filename specified")

    # Parse command line
    (opts, args) = command.parse_args(arguments[1:])

    # Read all configuration files (if present). The order in the 
    # CFG_SEARCH_PATHS variable is important in order to have the
    # local-directory config precedence over the home directory and
    # the home-directory over the system one
    try :
        configuration.read(os.path.expandvars(CFG_SEARCH_PATHS))
    except Configuration.ParsingError, e :
        error("Problems parsing configuration file (" + str(e) + ")")
        return 1
    except Exceptions.Configuration:
        warning("Problem reading configuration file, using defaults ...")

    # Override configuration options with command line ones
    if (opts.colors == True) :
        configuration.set(PROGRAM_NAME, 'colors', True)
    if (opts.verbose == True) :
        configuration.set(PROGRAM_NAME, 'verbose', True)
    if (opts.debug == True) :
        configuration.set(PROGRAM_NAME, 'debug', True)
    if (opts.database != None) :
        configuration.set(PROGRAM_NAME, 'database', opts.database)
    if (opts.configuration != None) :
        configuration.set(PROGRAM_NAME, 'configuration', opts.configuration)

    # Finally handle global configuration
    if (configuration.get(PROGRAM_NAME, 'debug', raw = True) == True) :
        Trace.debug = True

    # Handle command related checks
    if (len(command.rargs) < 1) :
        hint("Missing command")
        return 1

    cmd = command.rargs[0]
    try :
        command_do = commands[cmd]['do']
    except KeyError :
        hint("Unknown command `" + cmd + "'")
        return 1
    except :
        bug()

    parameters = []
    if (len(command.rargs) >= 2) :
        parameters = command.rargs[1:]

    # Run the command
    retval = 1
    try :
        assert(callable(command_do))
        retval = command_do(configuration, parameters)
    except IOError, e :
        error(e)
    except ValueError, e :
        error(e)
    except Exceptions.Parameters, e :
        hint(e)
    except Exceptions.Base, e :
        error(e)
    except SystemExit, e:
        retval = e
    except :
        bug()

    debug("Command returned `" + str(retval) + "'")
    if (retval != 0) :
        return retval

    # Save configuration back to file (if needed)
    if (configuration.dirty()) :
        filename = configuration.get(PROGRAM_NAME,'configuration')
        assert(filename != None)
        assert(filename != "")

        debug("Writing back all configuration to file `" + filename + "'")
        try :
            ofp = open(filename, 'w')
            configuration.write(ofp)
        except Configuration.Error, e:
            error(e)
            return 1
        except :
            bug()

    debug("All operations completed successfully")
    return 0
    
if (__name__ == '__main__') :
    sys.exit(main(sys.argv))
